<?php

namespace App\Infrastructure\Support\BikramSambat;

use Carbon\Carbon;
use DateInterval;
use DateTime;
use Exception;

/**
 * Class BikramSambat
 * @package App\Infrastructure\Support\BikramSambat
 */
final class BikramSambat
{
    /**
     * @var array
     */
    protected array $bsDate = [];
    /**
     * @var array
     */
    protected array $adDate = [];
    /**
     * @var array
     */
    protected array $bsYears = [
        1975 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        1976 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        1977 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        1978 => [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        1979 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        1980 => [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        1981 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        1982 => [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        1983 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        1984 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        1985 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        1986 => [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        1987 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        1988 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        1989 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        1990 => [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        1991 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        1992 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        1993 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        1994 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        1995 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        1996 => [31, 31, 32, 32, 31, 30, 29, 30, 30, 29, 30, 30],
        1997 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        1998 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        1999 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2000 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        2001 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2002 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2003 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2004 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        2005 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2006 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2007 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2008 => [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        2009 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2010 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2011 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2012 => [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        2013 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2014 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2015 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2016 => [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        2017 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2018 => [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2019 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        2020 => [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        2021 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2022 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        2023 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        2024 => [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        2025 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2026 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2027 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        2028 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2029 => [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
        2030 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2031 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        2032 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2033 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2034 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2035 => [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        2036 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2037 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2038 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2039 => [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        2040 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2041 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2042 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2043 => [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        2044 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2045 => [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2046 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2047 => [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        2048 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2049 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        2050 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        2051 => [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        2052 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2053 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        2054 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        2055 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2056 => [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
        2057 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2058 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        2059 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2060 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2061 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2062 => [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],
        2063 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2064 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2065 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2066 => [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        2067 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2068 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2069 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2070 => [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        2071 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2072 => [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2073 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        2074 => [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        2075 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2076 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        2077 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        2078 => [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        2079 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2080 => [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        2081 => [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        2082 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        2083 => [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
        2084 => [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
        2085 => [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],
        2086 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        2087 => [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
        2088 => [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],
        2089 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        2090 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        2091 => [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        2092 => [30, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        2093 => [30, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        2094 => [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
        2095 => [31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 30, 30],
    ];
    /**
     * @var array
     */
    protected array $dateConversionConfig = [
        'ad_firstDay' => '1918-04-13',
        'bs_start'    => '1975',
        'ad_start'    => '1918',
        'bs_end'      => '2095',
        'ad_end'      => '2038',
    ];

    /**
     * @param string $bsDate
     *
     * @return Carbon|null
     * @throws Exception
     */
    public static function bsToAd(string $bsDate): ?Carbon
    {
        if ( !$bsDate ) {
            return null;
        }

        try {
            return (new static())->setBs($bsDate)->toAd();
        } catch (InvalidDateException $exception) {
            return null;
        }
    }

    /**
     * @param int    $month
     * @param string $locale
     *
     * @return string
     * @throws InvalidDateException
     * @throws Exception
     */
    public static function bsMonthText(int $month, string $locale = 'ne'): string
    {
        if ( $month < 1 || $month > 12 ) {
            throw new InvalidDateException('Invalid Month');
        }

        if ( !in_array($locale, ['ne', 'en']) ) {
            throw new Exception('Currently "ne" or "en" locale only supported for amount formatting.');
        }

        $monthsEn = [
            "Baisakh",
            "Jestha",
            "Asar",
            "Shrawan",
            "Bhadra",
            "Asoj",
            "Kartik",
            "Mangsir",
            "Pouse",
            "Magh",
            "Falgun",
            "Chaitra",
        ];
        $monthsNe = ["बैशाख", "जेठ", "असार", "सावन", "भदौ", "असोज", "कार्तिक", "मंसिर", "पौष", "माघ", "फागुन", "चैत"];

        return $locale === 'en' ? $monthsEn[$month - 1] : $monthsNe[$month - 1];
    }

    /**
     * @param string $date
     *
     * @return $this
     */
    public function setAd(string $date): self
    {
        $date = array_map('trim', (array) preg_split("/[\D|\s]/", $date));

        $this->adDate = [
            'y' => $date[0],
            'm' => $date[1],
            'd' => $date[2],
        ];

        return $this;
    }

    /**
     * @param string $date
     *
     * @return $this
     * @throws InvalidDateException
     */
    public function setBs(string $date): self
    {
        $date = array_map('trim', (array) preg_split("/[\D|\s]/", $date));

        $this->bsDate = [
            'y' => (int) ($date[0] ?? ''),
            'm' => (int) ($date[1] ?? ''),
            'd' => (int) ($date[2] ?? ''),
        ];

        $this->validateBs();

        return $this;
    }

    /**
     * @return Carbon
     * @throws InvalidDateException
     * @throws Exception
     */
    public function toAd(): Carbon
    {
        if ( empty($this->bsDate) ) {
            throw new InvalidDateException('No Date passed for conversion.');
        }

        $year  = $this->bsDate['y'];
        $month = $this->bsDate['m'];
        $day   = $this->bsDate['d'];

        /** @var DateTime $dateStart */
        $dateStart = date_create($this->dateConversionConfig['ad_firstDay']);
        $dayCount  = 0;
        $months    = $month - 1;

        /** @noinspection PhpVariableNamingConventionInspection */
        for ($i = $this->dateConversionConfig['bs_start']; $i < $year; $i++) {
            $dayCount += array_sum($this->bsYears[$i]);
        }

        /** @noinspection PhpVariableNamingConventionInspection */
        for ($j = 0; $j < $months; $j++) {
            $dayCount += $this->bsYears[$i][$j];
        }

        $dayCount += $day - 1;

        /** @var DateInterval $dateInterval */
        $dateInterval = date_interval_create_from_date_string("{$dayCount} days");

        /** @var DateTime $dateAd */
        $dateAd = date_add($dateStart, $dateInterval);

        return new Carbon($dateAd->format('Y-m-d H:i:s'));
    }

    /**
     * @return bool
     * @throws InvalidDateException
     */
    protected function validateBs(): bool
    {
        $year  = $this->bsDate['y'];
        $month = $this->bsDate['m'];
        $day   = $this->bsDate['d'];

        if ( !array_key_exists($year, $this->bsYears) ) {
            throw new InvalidDateException('Invalid "Year" range.');
        }

        if ( $month > 12 || $month < 1 ) {
            throw new InvalidDateException('Invalid "Month" range.');
        }

        if ( $day > $this->bsYears[$year][$month - 1] || $day < 1 ) {
            throw new InvalidDateException('Invalid "Day" range.');
        }

        return true;
    }
}
